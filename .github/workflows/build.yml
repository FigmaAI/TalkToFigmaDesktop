name: Build Community Release

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21 (Amazon Corretto)
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        sed -i '' "s/^version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run tests
      run: ./gradlew test --no-daemon

  package-mac:
    runs-on: macos-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21 (Amazon Corretto)
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'corretto'
        
    - name: Set version from tag
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        sed -i '' "s/^version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build unsigned Mac packages (ARM64 and Intel)
      run: |
        echo "Building unsigned community version for ARM64..."
        ./gradlew packageDmg -PsigningEnabled=false -Dcompose.desktop.mac.archs=arm64 --no-daemon
        
        echo "Building unsigned community version for Intel x64..."
        ./gradlew packageDmg -PsigningEnabled=false -Dcompose.desktop.mac.archs=x86_64 --no-daemon -x clean
      
    - name: Rename DMG files
      run: |
        cd app/build/compose/binaries/main/dmg/
        version=${GITHUB_REF#refs/tags/}
        
        # Find and rename DMG files
        for dmg_file in *.dmg; do
          if [ -f "$dmg_file" ]; then
            # Check if it's Intel or ARM64 based on file content or naming
            if file "$dmg_file" | grep -q "x86_64" || hdiutil imageinfo "$dmg_file" | grep -q "x86_64"; then
              new_name="TalkToFigma-${version}-intel.dmg"
            else
              new_name="TalkToFigma-${version}-arm64.dmg"
            fi
            mv "$dmg_file" "$new_name"
            echo "Renamed $dmg_file to: $new_name"
          fi
        done
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg-files
        path: app/build/compose/binaries/main/dmg/*.dmg
        retention-days: 30

  package-windows:
    runs-on: windows-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21 (Amazon Corretto)
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      shell: bash
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        sed -i "s/^version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Build Windows packages
      run: |
        ./gradlew packageMsi packageExe --no-daemon
      
    - name: Rename Windows packages
      shell: bash
      run: |
        version=${GITHUB_REF#refs/tags/}
        
        cd app/build/compose/binaries/main/msi/
        msi_file=$(find . -name "*.msi" -type f | head -n 1)
        if [ -n "$msi_file" ]; then
          new_msi="TalkToFigma-${version}.msi"
          mv "$msi_file" "$new_msi"
          echo "Renamed MSI to: $new_msi"
        fi
        
        cd ../exe/
        exe_file=$(find . -name "*.exe" -type f | head -n 1)
        if [ -n "$exe_file" ]; then
          new_exe="TalkToFigma-${version}.exe"
          mv "$exe_file" "$new_exe"
          echo "Renamed EXE to: $new_exe"
        fi
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: |
          app/build/compose/binaries/main/msi/
          app/build/compose/binaries/main/exe/
        retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [test, package-mac, package-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/macos-dmg-files/*.dmg
          artifacts/windows-packages/**/*.msi
          artifacts/windows-packages/**/*.exe
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## TalkToFigma Desktop Release
          
          ### ðŸ“¦ Download
          - **macOS Apple Silicon**: `TalkToFigma-${{ github.ref_name }}-arm64.dmg`
          - **macOS Intel**: `TalkToFigma-${{ github.ref_name }}-intel.dmg`
          - **Windows**: `TalkToFigma-${{ github.ref_name }}.msi` or `TalkToFigma-${{ github.ref_name }}.exe`
          
          ### ðŸš€ Installation Notes
          **macOS**: 
          Since this version is unsigned, you may need to:
          1. Right-click the app and select "Open"
          2. Or go to System Preferences > Security & Privacy and click "Open Anyway"
          
          **Windows**: 
          No special installation steps required.
          
          ### ðŸŽ¯ Architecture Support
          - **ARM64 DMG**: Optimized for Apple Silicon Macs (M1, M2, M3)
          - **Intel DMG**: Compatible with Intel-based Macs and Apple Silicon via Rosetta