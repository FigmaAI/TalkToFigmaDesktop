name: Build and Release

on:
  push:
    branches: [ main, internal-release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run tests
      run: ./gradlew test --no-daemon
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: app/build/
        retention-days: 7

  package-mac:
    runs-on: macos-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i '' "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Import signing certificate and set up environment
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        SIGNING_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE_BASE64 }}
        SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$SIGNING_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$SIGNING_CERTIFICATE_PASSWORD" $KEYCHAIN_PATH
        
        echo $SIGNING_CERTIFICATE_BASE64 | base64 --decode -o $RUNNER_TEMP/certificate.p12
        security import $RUNNER_TEMP/certificate.p12 -k $KEYCHAIN_PATH -P "$SIGNING_CERTIFICATE_PASSWORD" -A
        
        security list-keychains -d user -s $KEYCHAIN_PATH
        
        echo "APPLE_ID=${APPLE_ID}" >> $GITHUB_ENV
        echo "APPLE_PASSWORD=${APPLE_PASSWORD}" >> $GITHUB_ENV
        echo "APPLE_TEAM_ID=${APPLE_TEAM_ID}" >> $GITHUB_ENV
        echo "SIGNING_IDENTITY=${SIGNING_IDENTITY}" >> $GITHUB_ENV
      
    - name: Notarize and Package
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        chmod +x scripts/notarize.sh
        ./scripts/notarize.sh
      
    - name: Build Unsigned DMG (Main Branch)
      if: github.ref == 'refs/heads/main'
      run: ./gradlew packageDmg --no-daemon -PsigningEnabled=false
      
    - name: Clean up keychain
      if: always() && startsWith(github.ref, 'refs/tags/v')
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
      
    - name: Rename DMG file with version
      run: |
        cd app/build/compose/binaries/main/dmg/
        original_file=$(find . -name "*.dmg" -type f | head -n 1)
        if [ -n "$original_file" ]; then
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            version=${GITHUB_REF#refs/tags/}
          else
            version="v1.0.0-unsigned"
          fi
          new_name="TalkToFigma-${version}.dmg"
          mv "$original_file" "$new_name"
          echo "Renamed DMG from '$original_file' to '$new_name'"
          ls -la
        else
          echo "No DMG file found!"
          ls -la
        fi
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: app/build/compose/binaries/main/dmg/
        retention-days: 30

  package-windows:
    runs-on: windows-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build MSI package
      run: ./gradlew packageMsi --no-daemon
      
    - name: Build EXE package
      run: ./gradlew packageExe --no-daemon
      
    - name: Rename Windows packages with version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          version=${GITHUB_REF#refs/tags/}
        else
          version="v1.0.0"
        fi
        
        # MSI file name change
        cd app/build/compose/binaries/main/msi/
        msi_file=$(find . -name "*.msi" -type f | head -n 1)
        if [ -n "$msi_file" ]; then
          new_msi="TalkToFigma-${version}.msi"
          mv "$msi_file" "$new_msi"
          echo "Renamed MSI to: $new_msi"
        fi
        
        # EXE file name change
        cd ../exe/
        exe_file=$(find . -name "*.exe" -type f | head -n 1)
        if [ -n "$exe_file" ]; then
          new_exe="TalkToFigma-${version}.exe"
          mv "$exe_file" "$new_exe"
          echo "Renamed EXE to: $new_exe"
        fi
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: |
          app/build/compose/binaries/main/msi/
          app/build/compose/binaries/main/exe/
        retention-days: 30

  # sign-and-release-mac job is now integrated into package-mac
  # The old job has been removed to avoid confusion.

  create-release:
    runs-on: ubuntu-latest
    needs: [package-mac, package-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          macos-dmg/*.dmg
          windows-packages/**/*.msi
          windows-packages/**/*.exe
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## TalkToFigma Desktop Release
          
          ### 📦 Download
          - **macOS**: `TalkToFigma-${{ github.ref_name }}.dmg` (Signed and Notarized for tagged releases)
          - **Windows**: `TalkToFigma-${{ github.ref_name }}.msi` or `TalkToFigma-${{ github.ref_name }}.exe` 
          
          ### 🚀 How to install
          **macOS**: 
          1. Double-click the DMG file to mount
          2. Drag and drop the TalkToFigma Desktop app to the Applications folder
          
          **Windows**: 
          - **MSI**: Recommended method, official installation on the system
          - **EXE**: Portable executable file
          
          ### ⚠️ Important
          **macOS**: For builds from the 'main' branch (not releases), the app is not signed and Gatekeeper may show a warning.
          - Right-click the app → "Open"
          - Select "Open Anyway" in "System Settings > Security & Privacy" 