name: Build and Release

on:
  push:
    branches: [ main, internal-release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew build --no-daemon
      
    - name: Run tests
      run: ./gradlew test --no-daemon
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: app/build/
        retention-days: 7

  package-mac:
    runs-on: macos-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i '' "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create distributable
      run: ./gradlew createDistributable --no-daemon
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-distributable
        path: app/build/compose/binaries/main/app/
        retention-days: 30

  package-windows:
    runs-on: windows-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build MSI package
      run: ./gradlew packageMsi --no-daemon
      
    - name: Build EXE package
      run: ./gradlew packageExe --no-daemon
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: |
          app/build/compose/binaries/main/msi/
          app/build/compose/binaries/main/exe/
        retention-days: 30

  # TODO: 나중에 사이닝 구현
  # sign-and-release-mac:
  #   runs-on: macos-latest
  #   needs: package-mac
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up Amazon Corretto JDK 21
  #     uses: actions/setup-java@v4
  #     with:
  #       distribution: 'corretto'
  #       java-version: '21'
  #       
  #   - name: Set version from tag
  #     run: |
  #       TAG_VERSION=${GITHUB_REF#refs/tags/v}
  #       echo "Building version: $TAG_VERSION"
  #       # Update version in build.gradle.kts
  #       sed -i '' "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
  #       
  #   - name: Download macOS artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: macos-distributable
  #       path: app/build/compose/binaries/main/app/
  #       
  #   - name: Set up signing environment
  #     env:
  #       APPLE_ID: ${{ secrets.APPLE_ID }}
  #       APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  #       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #       SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
  #     run: |
  #       echo "Setting up signing environment..."
  #       # Add signing setup here if needed
  #       
  #   - name: Build and sign DMG
  #     run: |
  #       chmod +x build-mac.sh
  #       ./build-mac.sh
  #       
  #   - name: Upload signed DMG
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: signed-dmg
  #       path: dist/*.dmg
  #       retention-days: 90

  create-release:
    runs-on: ubuntu-latest
    needs: [package-mac, package-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare macOS app bundle for release
      run: |
        # macOS 앱 번들을 ZIP으로 압축
        cd macos-distributable
        zip -r ../TalkToFigmaDesktop-macos.zip *
        cd ..
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          TalkToFigmaDesktop-macos.zip
          windows-packages/**/*.msi
          windows-packages/**/*.exe
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## TalkToFigma Desktop Release
          
          ### 다운로드
          - **macOS**: TalkToFigmaDesktop-macos.zip (앱 번들, 사이닝 없음)
          - **Windows**: .msi 또는 .exe 파일 선택
          
          ### 설치 방법
          **macOS**: ZIP 파일을 압축 해제하고 Applications 폴더로 이동
          **Windows**: MSI 파일을 실행하여 설치
          
          > 참고: macOS 버전은 현재 사이닝되지 않았으므로 Gatekeeper 경고가 나타날 수 있습니다.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 