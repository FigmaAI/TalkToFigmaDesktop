name: Build and Release

on:
  push:
    branches: [ main, internal-release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build with Gradle
      run: ./gradlew build --no-daemon
      
    - name: Run tests
      run: ./gradlew test --no-daemon
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: app/build/
        retention-days: 7

  package-mac:
    runs-on: macos-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i '' "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Create DMG package
      run: ./gradlew packageDmg --no-daemon
      
    - name: Rename DMG file with version
      run: |
        cd app/build/compose/binaries/main/dmg/
        # Find and rename the existing DMG file with the version
        original_file=$(find . -name "*.dmg" -type f | head -n 1)
        if [ -n "$original_file" ]; then
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            # Extract version from tag: refs/tags/v1.0.0 -> v1-0-0
            version=${GITHUB_REF#refs/tags/}
            formatted_version=$(echo "$version" | sed 's/\./-/g')
          else
            # Use default version if not a tag
            formatted_version="v1-0-0"
          fi
          new_name="TalkToFigma-${formatted_version}.dmg"
          mv "$original_file" "$new_name"
          echo "Renamed DMG from '$original_file' to '$new_name'"
          ls -la
        else
          echo "No DMG file found!"
          ls -la
        fi
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: app/build/compose/binaries/main/dmg/
        retention-days: 30

  package-windows:
    runs-on: windows-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Amazon Corretto JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto'
        java-version: '21'
        
    - name: Set version from tag
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Building version: $TAG_VERSION"
        # Update version in build.gradle.kts
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build MSI package
      run: ./gradlew packageMsi --no-daemon
      
    - name: Build EXE package
      run: ./gradlew packageExe --no-daemon
      
    - name: Rename Windows packages with version
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          version=${GITHUB_REF#refs/tags/}
          formatted_version=$(echo "$version" | sed 's/\./-/g')
        else
          formatted_version="v1-0-0"
        fi
        
        # MSI file name change
        cd app/build/compose/binaries/main/msi/
        msi_file=$(find . -name "*.msi" -type f | head -n 1)
        if [ -n "$msi_file" ]; then
          new_msi="TalkToFigma-${formatted_version}.msi"
          mv "$msi_file" "$new_msi"
          echo "Renamed MSI to: $new_msi"
        fi
        
        # EXE file name change
        cd ../exe/
        exe_file=$(find . -name "*.exe" -type f | head -n 1)
        if [ -n "$exe_file" ]; then
          new_exe="TalkToFigma-${formatted_version}.exe"
          mv "$exe_file" "$new_exe"
          echo "Renamed EXE to: $new_exe"
        fi
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: |
          app/build/compose/binaries/main/msi/
          app/build/compose/binaries/main/exe/
        retention-days: 30

  # TODO
  # sign-and-release-mac:
  #   runs-on: macos-latest
  #   needs: package-mac
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up Amazon Corretto JDK 21
  #     uses: actions/setup-java@v4
  #     with:
  #       distribution: 'corretto'
  #       java-version: '21'
  #       
  #   - name: Set version from tag
  #     run: |
  #       TAG_VERSION=${GITHUB_REF#refs/tags/v}
  #       echo "Building version: $TAG_VERSION"
  #       # Update version in build.gradle.kts
  #       sed -i '' "s/version = \".*\"/version = \"$TAG_VERSION\"/" app/build.gradle.kts
  #       
  #   - name: Download macOS artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: macos-distributable
  #       path: app/build/compose/binaries/main/app/
  #       
  #   - name: Set up signing environment
  #     env:
  #       APPLE_ID: ${{ secrets.APPLE_ID }}
  #       APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  #       APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  #       SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
  #     run: |
  #       echo "Setting up signing environment..."
  #       # Add signing setup here if needed
  #       
  #   - name: Build and sign DMG
  #     run: |
  #       chmod +x build-mac.sh
  #       ./build-mac.sh
  #       
  #   - name: Upload signed DMG
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: signed-dmg
  #       path: dist/*.dmg
  #       retention-days: 90

  create-release:
    runs-on: ubuntu-latest
    needs: [package-mac, package-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          macos-dmg/*.dmg
          windows-packages/**/*.msi
          windows-packages/**/*.exe
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## TalkToFigma Desktop Release
          
          ### 📦 Download
          - **macOS**: `TalkToFigma-${{ github.ref_name }}.dmg` (App bundle, no signing)
          - **Windows**: `TalkToFigma-${{ github.ref_name }}.msi` or `TalkToFigma-${{ github.ref_name }}.exe` 
          
          ### 🚀 How to install
          **macOS**: 
          1. Double-click the DMG file to mount
          2. Drag and drop the TalkToFigma Desktop app to the Applications folder
          
          **Windows**: 
          - **MSI**: Recommended method, official installation on the system
          - **EXE**: Portable executable file
          
          ### ⚠️ Important
          **macOS**: Currently not signed, so Gatekeeper warning may appear.
          - Right-click the app → "Open"
          - Select "Open Anyway" in "System Settings > Security & Privacy" 